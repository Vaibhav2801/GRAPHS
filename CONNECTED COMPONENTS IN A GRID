#include<bits/stdc++.h>
 using namespace std;
 #define int long long
 #define double long double
 #define endl "\n"
 const double pi=3.141593;
 const int mod=1000000007;
 #define fast_io ios_base::sync_with_stdio(false)
 #define clr(a,x) memset(a,x,sizeof(a))
 #define T int t;cin>>t; while(t--)
 #define vll vector<int>
 #define v22 vactor<vector<double>>
 #define pb push_back
 #define lb lower_bound
 #define ub upper_bound
 #define b_s binary_search
 #define ff first
 #define ss second
 #define str to_string
 #define intt stoll
 #define sv(x) sort(x.begin(),x.end())
 #define all(x) x.begin(),x.end()
 #define vp vector<pair<int,int>>
 vector<int> adj[200001];
 int visited[1001][1001];
 int a[1001][1001];
 int dx[]={0,0,1,-1};
 int dy[]={1,-1,0,0};
 string ds="RLDU";
 bool poss(int x,int y,int n, int m)
 {
   return (x<n && x>=0 && y<m && y>=0);
 }
 void visit()
 {
   for(int i=0;i<=1000;i++)
   {
     for(int j=0;j<=1000;j++)
     visited[i][j]=-1;
   }
 }
 void dfs(int x,int y,int n,int m)
 {
   if(!poss(x,y,n,m) || visited[x][y]!=-1 || a[x][y]==0) return;
   visited[x][y]=1;
   for(int i=0;i<4;i++)
   {
     int nx=x+dx[i];
     int ny=y+dy[i];
     dfs(nx,ny,n,m);
   }
 }
 int32_t main()
 {
    int n,m,ans=0; cin>>n>>m;
    for(int i=0;i<n;i++)
    {
       string s; 
      cin>>s;
      for(int j=0;j<m;j++)
      {
        if(s[j]=='#') a[i][j]=0;
        else a[i][j]=1;
      }
    }
    visit();
    for(int i=0;i<n;i++)
    {
         for(int j=0;j<m;j++)
       {
        if(a[i][j]==1 && visited[i][j]==-1)
        {
          dfs(i,j,n,m);
          ans++;
        }
       }
       }
       cout<<ans;
    }
